[include shell_command.cfg]
# For the ZNP Robin Nano DW v2.2 board:
#   - Compile with the processor model STM32F401.
#   - Select the 32KiB bootloader,
#   - Select (Serial (on # USART1 PA10/PA9) for the communication interface.
#   - Select (Serial (on # USART2 PA3/PA2) if you want to use the serial UART pins on J17 (wifi section)
# Note that the "make flash" command does not work with ZNP Robin boards. After running "make", run the following command:
# cp out/klipper.bin out/ZNP_ROBIN_NANO.bin
#
# Copy the file out/ZNP_ROBIN_NANO.bin to an SD card and then restart the printer with that SD card.
# See docs/Config_Reference.md for a description of parameters.

#[include timelapse.cfg]

[exclude_object]

[virtual_sdcard]
path: /home/jonny/printer_data/gcodes

#[include ./KAMP/KAMP_Settings.cfg]
[include KAMP_Settings.cfg]
[include Adaptive_Meshing.cfg]

#[include start.cfg]

#BED_MESH_CALIBRATE ADAPTIVE=1

#[skew_correction]

[pause_resume]

[display_status]



[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
    ##### read E from pause macro #####
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    ##### set park positon for x and y #####
    # default is your max posion from your printer.cfg
    {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
    {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% if act_z < (max_z - 2.0) %}
        {% set z_safe = 2.0 %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    ##### end of definitions #####
    PAUSE_BASE
    G91
    {% if printer.extruder.can_extrude|lower == 'true' %}
      G1 E-{E} F2100
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}
    {% if "xyz" in printer.toolhead.homed_axes %}
      G1 Z{z_safe} F900
      G90
      G1 X{x_park} Y{y_park} F6000
    {% else %}
      {action_respond_info("Printer not homed")}
    {% endif %} 
    
[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
    ##### read E from pause macro #####
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    #### get VELOCITY parameter if specified ####
    {% if 'VELOCITY' in params|upper %}
      {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
    {%else %}
      {% set get_params = "" %}
    {% endif %}
    ##### end of definitions #####
    {% if printer.extruder.can_extrude|lower == 'true' %}
      G91
      G1 E{E} F2100
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}  
    RESUME_BASE {get_params}

[mcu]
serial: /dev/ttyUSB0
restart_method: command

[led LED_Light]
white_pin: PB9
initial_white: 1.0

#[output_pin LED_Light] #toggle for LED Light - use this instead of [LED] for sonic pad
#Pin: PB9
#cycle_time: 0.01
#pwm: true
#value: 1

[printer]
kinematics: cartesian
max_velocity: 500
max_accel: 3000
max_z_velocity: 15
max_z_accel: 100
square_corner_velocity: 5
# Use those higher values just to configure Input Shaper 
#max_accel: 10000
#max_accel_to_decel: 10000

[stepper_x]
step_pin: !PC12
dir_pin: PB3
enable_pin: !PD2
microsteps: 16
rotation_distance: 40
endstop_pin: PA13
position_endstop: -6.0
position_min: -6
position_max: 235
homing_speed: 50

[stepper_y]
step_pin: PC11
dir_pin: PA15
enable_pin: !PC10
microsteps: 16
rotation_distance: 40
endstop_pin: PB8
position_endstop: 0
position_max: 235
homing_speed: 50

[stepper_z]
step_pin: PC7
dir_pin: !PC9
enable_pin: !PC8
rotation_distance: 8
microsteps: 16
position_min: -2
position_max: 280
endstop_pin: probe:z_virtual_endstop # Use Z- as endstop
homing_speed: 5.0


[extruder]
max_extrude_only_distance: 101.0
step_pin: PB10
dir_pin: PB1
enable_pin: !PC6
microsteps: 16
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: PA6
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PC1
min_temp: 0
max_temp: 250
#min_extrude_temp: 170
# Calibrate E-Steps https://www.klipper3d.org/Rotation_Distance.html#calibrating-rotation_distance-on-extruders
rotation_distance: 7.7625
# Calibrate PID: https://www.klipper3d.org/Config_checks.html#calibrate-pid-settings
#  - Example: PID_CALIBRATE HEATER=extruder TARGET=200
control = pid
pid_kp = 30.356
pid_ki = 1.857
pid_kd = 124.081
# Calibrate PA: https://www.klipper3d.org/Pressure_Advance.html
#pressure_advance = 0.043
pressure_advance = 0.03
max_extrude_cross_section: 5

[skew_correction]
#SET_SKEW XY=140.56,141.04,99.75 XZ=140.97,140.65,99.7 YZ=141,141.15,98.82


[heater_bed]
heater_pin: PA5
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PC0
pwm_cycle_time: 0.020 # set to 0.0166 if your grid runs on 60Hz to fix lights flickering
max_temp: 110
min_temp: 0
# Calibrate PID: https://www.klipper3d.org/Config_checks.html#calibrate-pid-settings
#  - Example: PID_CALIBRATE HEATER=heater_bed TARGET=60
control = pid
pid_kp = 64.230
pid_ki = 0.723
pid_kd = 1425.905

[heater_fan hotend_fan]
pin: PB0
heater: extruder
heater_temp: 50.0

[fan]
pin: PA7

[force_move]
enable_force_move: True

[safe_z_home]
home_xy_position: 117.5, 117.5
z_hop: 10

[probe]
pin: ^PA8
speed: 5
lift_speed: 15
samples: 1
x_offset: -28
y_offset: 20
# Calibrate probe: https://www.klipper3d.org/Bed_Level.html
# - Example: PROBE_CALIBRATE, then adjust with TESTZ Z=+/-X
#z_offset = -0.100

[filament_switch_sensor filament_sensor]
pause_on_runout: true
switch_pin: PB4

[bed_mesh]
speed: 300
horizontal_move_z: 5.0
mesh_min: 30,30
mesh_max: 205,205
#probe_count: 6,6
probe_count: 15,15
mesh_pps: 4,4
algorithm: bicubic
bicubic_tension: 0.2
fade_start: 1
fade_end: 10
fade_target: 0

[input_shaper]
# Calibrate IS: https://www.klipper3d.org/Resonance_Compensation.html
shaper_type_y = mzv
shaper_freq_y = 38.2
shaper_type_x = ei
shaper_freq_x = 79.6

[temperature_sensor raspberry_pi]
sensor_type: temperature_host
#min_temp: 10
#max_temp: 105

[temperature_sensor mcu_temp]
sensor_type: temperature_mcu
sensor_temperature1: 25
sensor_adc1: 0.210317
#min_temp: 0
#max_temp: 105

[gcode_macro M420]
description: Load the current mesh
gcode:
  BED_MESH_PROFILE LOAD=default
  #BED_MESH_CALIBRATE ADAPTIVE=1
[gcode_macro G29]
description: creates automated homing and bed mesh
gcode:
  BED_MESH_CLEAR
  G28
  #BED_MESH_CALIBRATE
#  BED_MESH_CALIBRATE
#  DATA_SAVE
#  SAVE_CONFIG

#[gcode_macro PRINT_START]         
#gcode:
#    SAVE_VARIABLE VARIABLE=was_interrupted VALUE=True
#	  G92 E0
    #BED_MESH_CLEAR                                           
#	  G90             
    #BED_MESH_CALIBRATE
    #BED_MESH_PROFILE LOAD=default   
#    CLEAR_PAUSE
#    M117 Printing                   

[gcode_macro START_PRINT]
gcode:
    M413 S0 ; disable Power Loss Recovery
    M117
    G90 ; use absolute coordinates
    M83 ; extruder relative mode
    M104 S120 ; set temporary nozzle temp to prevent oozing during homing and auto bed leveling
    M140 S[bed_temperature_initial_layer_single] ; set final bed temp
    G4 S10 ; allow partial nozzle warmup
;;SET_SKEW XY=140.56,141.04,99.75 XZ=140.97,140.65,99.7 YZ=141,141.15,98.82
    SET_SKEW XY=99.9,99.85,70.6
    G29 
    BED_MESH_CLEAR
    BED_MESH_CALIBRATE
    M420 S1 ; load mesh
    G1 Z50 F240
    G1 X2 Y10 F3000
    M104 S[nozzle_temperature_initial_layer] ; set final nozzle temp
    M190 S[bed_temperature_initial_layer_single] ; wait for bed temp to stabilize
    M109 S[nozzle_temperature_initial_layer] ; wait for nozzle temp to stabilize
    G1 Z0.28 F240
    G92 E0
    G1 Y140 E10 F1500 ; prime the nozzle
    G1 X2.3 F5000
    G92 E0
    G1 Y10 E10 F1200 ; prime the nozzle
    G92 E0


    # Final safety check before extrusion
    {% if printer.extruder.temperature >= printer.configfile["extruder"]["min_extrude_temp"] %}
        G1 Y140 E10 F1500 ; prime the nozzle
        G1 X2.3 F5000
    {% else %}
        {action_respond_info("Error: Extruder below minimum temperature")}
    {% endif %}






[gcode_macro PRINT_END]
gcode:
    SAVE_VARIABLE VARIABLE=was_interrupted VALUE=False
    RUN_SHELL_COMMAND CMD=clear_plr
    clear_last_file
    {% set RUN_VELOCITY = printer.configfile.settings['printer'].max_velocity|float %}
    {% set RUN_ACCEL    = printer.configfile.settings['printer'].max_accel|float %}
    {% set RUN_DECEL    = printer.configfile.settings['printer'].max_accel_to_decel|float %}
    SET_VELOCITY_LIMIT VELOCITY={RUN_VELOCITY} ACCEL={RUN_ACCEL} ACCEL_TO_DECEL={RUN_DECEL}

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
    TURN_OFF_HEATERS
    CANCEL_PRINT_BASE  

[firmware_retraction]
retract_length: 0.8
retract_speed: 60
unretract_extra_length: 0
unretract_speed: 60

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [probe]
#*# z_offset = 2.280
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	  -0.077500, -0.110000, -0.132500, -0.155000, -0.187500
#*# 	  -0.052500, -0.080000, -0.095000, -0.115000, -0.167500
#*# 	  -0.057500, -0.085000, -0.097500, -0.120000, -0.145000
#*# 	  -0.022500, -0.045000, -0.060000, -0.090000, -0.125000
#*# 	  0.020000, -0.005000, -0.015000, -0.045000, -0.077500
#*# tension = 0.2
#*# min_x = 90.0007
#*# algo = lagrange
#*# y_count = 5
#*# mesh_y_pps = 4
#*# min_y = 90.0004
#*# x_count = 5
#*# max_y = 134.9604
#*# mesh_x_pps = 4
#*# max_x = 134.9607
#*#
#*# [skew_correction my_skew_profile]
#*# xy_skew = 0.0005006259133241275
#*# xz_skew = 0.002272576830037191
#*# yz_skew = -0.0010634496843668826
